#! @PERL@ -I@libexecdir@
# Backup SVN.
#
# Copyright (C) 2001-2004 Loic Dachary <loic@gnu.org> (sv_backups)
# Copyright (C) 2001-2004 Mathieu Roy <yeupou@gnu.org>
# Copyright (C) 2001-2004 Timothee Besset <ttimo@ttimo.net>
#
# This file is part of Savane.
#
# Savane is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Savane is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use Savane::Version;
use Getopt::Long;
use POSIX qw(strftime);

my $script = "sv_daily_svn_tarball";
my $logfile = "/var/log/sv_daily_svn_tarball.log";

my $help;
my $verbose;
my ($in, $out, $cvs_command);
my %disallow;

$help =
"Usage: $0 [OPTIONS]

   Simplistic script to make tarball for any svn directories in the given
   path.

   You can create a file /etc/daily_svn_tarball.disallow to disallow
   daily tarball of some repositories, one entry per line.

  -h, --help                   Show this help and exit
  -v, --version                Show Savane version and exit
      --in=/                   Path of the SVN directories
      --out=/                  Path of the generated tarballs
      --verbose                Increase verbosity level

Author: loic\@gnu.org, yeupou\@gnu.org, ttimo\@ttimo.net";
PrintVersionOrHelp ($help);

GetOptions ("verbose" => \$verbose, "in=s" => \$in, "out=s" => \$out);

unless ($in && $out)
  {
    print $help;
    exit (1);
  }

open (LOG, ">>$logfile");
PrintLog ("starting");
AcquireReplicationLock ();

# Get list of forbidden groups, if existing.
if (-e "/etc/daily_svn_tarball.disallow")
  {
    open (DISALLOW, "< /etc/daily_svn_tarball.disallow")
      or die "Internal error, contact the administrators.";
    while (<DISALLOW>)
      {
        s/\n//g;
        $disallow{$_} = "1";
      }
    close (DISALLOW);
  }
die "Not able to write to $out, exiting" unless -w $out;
die "Not able to read $in, exiting" unless -r $in;

sub PrintLog
{
  print LOG strftime "[$script] %c - $_[0]\n", localtime;
}

sub file_mtime
{
  my ($path) = @_;
  my
    (
      $dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size,
      $atime, $mtime, $ctime, $blksize, $blocks
    )
    = stat ($path);
  return $mtime;
}

sub file_newer
{
  my ($a, $b) = @_;
  return file_mtime ($a) > file_mtime ($b);
}

opendir (IN, $in)
  or die "Unable to open $in, exiting";

while (defined (my $svn = readdir (IN)))
  {
    next if exists ($disallow{$svn});
    # Check if the directory looks like an svn.
    my $rev = `svnlook youngest $in/$svn 2>/dev/null`;
    next if ($? != 0);
    chomp ($rev);
    my $target = $out."/".$svn.".".$rev.".dump.gz";
    next if -e $target;
    print STDERR "create dumpfile $target\n" if $verbose;
    PrintLog ("create dumpfile $target");
    # Remove older dumps.
    my $cleancmd = "rm $out/$svn.*.dump.gz 2>/dev/null";
    system ($cleancmd);
    # Build this one.
    my $dumpcmd = "svnadmin dump $in/$svn 2>/dev/null | gzip > $target";
    system ($dumpcmd);
    # Create a symlink for blind retrieval.
    my $symcmd = "ln -s $target $out/$svn.dump.gz";
    system ($symcmd);

    # If the dump check decided a dump was needed, consider that we need
    # to build a snapshot too.
    $target = "$out/$svn-snapshot.tar.gz";
    print STDERR "Make snapshot $target\n" if $verbose;
    PrintLog ("create snapshot $target");
    system ("rm", "-rf", "/tmp/$svn") if -e "/tmp/$svn";
    system ("mkdir", "/tmp/$svn");
    `cd /tmp/$svn && svn export file://$in/$svn/trunk $svn`;
    `cd /tmp/$svn && /bin/tar -zcf $target $svn`;
    system ("rm", "-rf", "/tmp/$svn");
  }
closedir (IN);

PrintLog ("work finished");
print LOG "[$script] ------------------------------------------------------\n";
