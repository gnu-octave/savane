#! @PERL@ -I@libexecdir@
#
# Copyright (C) 2001-2004 Loic Dachary <loic@gnu.org> (sv_backups)
# Copyright (C) 2001-2004 Mathieu Roy <yeupou@gnu.org>
# Copyright (C) 2022 Ineiev
#
# This file is part of Savane.
#
# Savane is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Savane is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use Getopt::Long;
use POSIX qw(strftime);
use Savane::Locks;
use Savane::Version;

my $script = "sv_daily_cvs_tarball";
my $logfile = "/var/log/sv_daily_cvs_tarball.log";

my $help;
my $verbose;
my ($in, $out, $cvs_command);
my %disallow;

$help =
"Usage: $0 [OPTIONS]

   Simplistic script to make tarball for any directories that got
   a CVSROOT in the given path.

   You can create a file /etc/daily_cvs_tarball.disallow to disallow
   daily tarball of some repositories, by adding inside the cvs directory
   to disallow, one entry per line.

  -h, --help                   Show this help and exit
  -v, --version                Show Savane version and exit
      --in=/                   Path of the CVS directories
      --out=/                  Path of the generated tarballs
      --cvs-command            Anonymous cvs command
      --verbose                Increase verbosity level

Author: loic\@gnu.org, yeupou\@gnu.org";
PrintVersionOrHelp ($help);

GetOptions (
  "verbose" => \$verbose, "in=s" => \$in, "out=s" => \$out,
  "cvs-command=s" => \$cvs_command
);

sub PrintLog
{
  print LOG strftime "[$script] %c - $_[0]\n", localtime;
}

open (LOG, ">>$logfile");
PrintLog ("starting");

AcquireReplicationLock ();

# Get list of forbidden groups, if existing.
if (-e "/etc/daily_cvs_tarball.disallow") {
    open (DISALLOW, "< /etc/daily_cvs_tarball.disallow")
        or die "Internal error, contact the administrators.";
    while (<DISALLOW>) {
        s/\n//g;
        $disallow{$_} = "1";
    }
    close (DISALLOW);
}

die "Not able to write to $out, exiting" unless -w $out;
die "Not able to read $in, exiting" unless -r $in;

sub file_mtime
{
  my ($path) = @_;

  my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size,
      $atime, $mtime, $ctime, $blksize, $blocks)
    = stat ($path);
  return $mtime;
}

# Return true if $a is newer than $b.
sub file_newer
{
  my ($a, $b) = @_;
  return file_mtime ($a) > file_mtime ($b);
}

opendir (IN, $in) or die "Unable to open $in, exiting";

while (defined (my $cvs = readdir (IN)))
  {
    # Check if the directory looks like a cvs.
    next if exists ($disallow{$cvs});
    my $cvsdir = "$in/$cvs";
    next unless -d $cvsdir;
    next unless -e "$in/$cvs/CVSROOT";
    chdir ($cvsdir)
      or die "cannot chdir $cvsdir : $!";

    my $backup = "$out/$cvs.tar.gz";
    my $snapshot = "$out/$cvs-snapshot.tar.gz";
    my $needed;

    if (! -f $backup)
      {
        printf STDERR "There is no backup yet\n" if $verbose;
        $needed = 1;
      }

    if (!defined ($needed) && -f "CVSROOT/history")
      {
        # History file my help us figure out if we need to backup
        # the CVS tree.
        my $loghistory;
        if (-f "CVSROOT/config")
          {
            ($loghistory) = grep (/^\s*LogHistory/, `cat CVSROOT/config`);
            # T "Tag" cmd.
            # O "Checkout" cmd.
            # E "Export" cmd.
            # F "Release" cmd.
            # W "Update" cmd - No User file, Remove from Entries file.
            # U "Update" cmd - File was checked out over User file.
            # G "Update" cmd - File was merged successfully.
            # C "Update" cmd - File was merged and shows overlaps.
            # M "Commit" cmd - "Modified" file.
            # A "Commit" cmd - "Added" file.
            # R "Commit" cmd - "Removed" file.
            if ($loghistory)
              {
                print STDERR $loghistory if $verbose;
                $loghistory =~ s/.=//;
              }
          }
        if ($loghistory && $loghistory !~ /[OEFWUGC]/)
          {
            # If read-only events are not logged, we can rely on its
            # modification time.
            printf STDERR "history file only logs RW events, rely on "
              . "history file modification time\n"
              if $verbose;
            $needed = file_newer ("$cvsdir/CVSROOT/history", $backup);
          }
        else
          {
            # Get the date of the last read-write event from the content
            # of the history file.
            my ($line) = `grep '^[TMAR]' CVSROOT/history | tail -1`;
            my ($lastrw) = $line;
            if ($lastrw)
              {
                $lastrw = hex (substr ($lastrw, 1, 8));
                if ($verbose)
                  {
                    printf STDERR $line;
                    printf STDERR "tarball is dated "
                      . localtime (file_mtime ($backup))
                      . " and last history event " . localtime ($lastrw)
                      . "\n";
                  }
           
                $needed = $lastrw > file_mtime ($backup);
                printf STDERR "last RW history event "
                  . ($needed? "more recent than backup"
                     : "tells us we don't need to backup")
                  . "\n"
                  if $verbose;
              }
          } # ! ($loghistory && $loghistory !~ /[OEFWUGC]/)
    } # if (!defined ($needed) && -f "CVSROOT/history")

    if (!defined ($needed))
      {
        # Do it the hard way : walk the tree until we find a file
        # that is more recent than the backup.
        system (
          "find $cvsdir -newer $backup -print "
          . "| while read file ; do exit 1 ; done"
        );
        $needed = $? != 0;
        print STDERR "the tree " . ($needed ? "" : "DOES NOT ")
          . "contain a file newer than the backup\n" if $verbose;
    }

    die "needed MUST be set at this stage" if !defined ($needed);

    if ($needed)
      {
        # Do the tarballs.
        # First, the repository.
        print STDERR "Make tarball\n" if $verbose;
        PrintLog ("build $backup");
        `cd $in && /bin/tar -zhcf $backup $cvs 2>/dev/null`;
        # Then, a checkout version, only if cvs-command is set.
        next unless $cvs_command;

        print STDERR "Make snapshot\n" if $verbose;
        PrintLog ("build $snapshot");
        system ("rm", "-rf", "/tmp/$cvs");
        system ("mkdir", "/tmp/$cvs");
        `cd /tmp/$cvs \
          && cvs $cvs_command/$cvs export -rHEAD . 2>/dev/null >/dev/null`;
        `cd /tmp && /bin/tar -zhcf $snapshot $cvs 2>/dev/null`;
        system ("rm", "-rf", "/tmp/$cvs");
      }
  } # while (defined (my $cvs = readdir (IN)))
closedir (IN);

PrintLog ("work finished");
print LOG "[$script] ------------------------------------------------------\n";
