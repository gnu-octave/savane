#! @PERL@ -I@libexecdir@
#
# Copyright (C) 2006 Mathieu Roy <yeupou--gnu.org>
# Copyright (C) 2022 Ineiev
#
# This file is part of Savane.
#
# Savane is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Savane is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Register public lists to mail-archives.com

use strict;
use Getopt::Long;
use Savane;
use POSIX qw(strftime);
use File::Temp qw(tempfile tempdir);

my $script = "sv_mailman_and_mailarchivedotcom";
my $cache = "/var/cache/savane/sv_mailman_and_mailarchivedotcom";

# Import.
our $sys_mail_domain;
our $sys_cron_mailman;

my $debug;
my $cron;

my $help =
"Usage: $0 [OPTIONS]

Register mailman public lists to mail-archives.com. It goes the dirty way
asking to register the mail-archive.com address without checking if the
address already exists, relying on mailman to do this.

This script is optional and have no purpose if you do not real public lists.

  -h, --help                   Show this help and exit
  -v, --version                Show Savane version and exit
      --cron                   Option to set when including this script
                               in a crontab
      --debug                  Debug mode: do everything apart from
                               overwriting system files


Author: yeupou\@gnu.org";
PrintVersionOrHelp ($help);

GetOptions ("debug" => \$debug, "cron" => \$cron);

# Test if we should run, according to conffile.
exit if ($cron && ! $sys_cron_mailman);

AcquireReplicationLock(); # Instances should not run concurrently.

my ($tmpcfgfh, $address) = tempfile(UNLINK => 1);
print $tmpcfgfh "archive\@mail-archive.com\n";
close($tmpcfgfh);

# Get the lists where mail-archives was already registered.
# It is safe to re-register several time the same user, mailman will not
# duplicate registration. However, it is very slow. So we first extract
# the list of lists where he was already registered, to be able to skip
# them afterwards.
my %already_registered;
open(CURRENTLYREG, "/usr/sbin/find_member archive\@mail-archive\.com |");
while (<CURRENTLYREG>)
  {
    # Ignore any line mentioned mail-archive.com, it must be warning.
    next if m/mail-archive\.com/;

    # Remove useless whitespaces add members adds god knows why.
    s/\s//g;

    # Register the address.
    $already_registered{$_} = 1;

    print "Already registered: $_\n"
      if $debug;
  }
close(CURRENTLYREG);

# Get lists from the database.
foreach my $line
  (
    GetDB ("mail_group_list", "is_public='1' AND status='5'", "list_name")
  )
  {
    chomp ($line);
    my ($name) = split (",", $line);

    # Ignore lists named spam.
    next if $name eq "spam";

    # Ignore any list that already go this user registered.
    next if $already_registered{$name};

    # Add to the list.
    system (
      "/usr/sbin/add_members", "-r", $address, "--admin-notify", "n", $name
    )
      unless $debug;

    print strftime "[$script] %c - Added to $name.\n", localtime
      if $debug;
  }
